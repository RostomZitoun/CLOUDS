{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Majed\\\\Desktop\\\\covidapp\\\\src\\\\components\\\\CovidGraph.js\";\nimport React from 'react';\nimport './CovidGraph.css';\nexport default class CovidGraph extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      am4chart: false,\n      data: null\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !(nextState.data == null);\n  }\n\n  componentDidMount() {\n    var _s = $RefreshSig$();\n\n    am4core.ready(_s(() => {\n      _s();\n\n      am4core.useTheme(target => {\n        target.list = [am4core.color(\"#c44569\"), am4core.color(\"#546de5\"), am4core.color(\"#f5cd79\")];\n      });\n      let chart = am4core.create(\"covidgraph_\" + this.props.name, am4charts.PieChart);\n      let xAxis = chart.xAxes.push(new am4charts.DateAxis());\n\n      let createAxisAndSeries = (field, name, opposite = true) => {\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        if (chart.yAxes.indexOf(valueAxis) != 0) valueAxis.syncWithAxis = chart.yAxes.getIndex(0);\n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.valueY = field;\n        series.dataFields.dateX = \"Date\";\n        series.strokeWidth = 2;\n        series.yAxis = valueAxis;\n        series.name = name;\n        series.tooltipText = \"{name}: [bold]{valueY}[/]\";\n        series.tensionX = 0.8;\n        series.showOnInit = true;\n        let interfaceColors = new am4core.InterfaceColorSet();\n        let bullet = series.bullets.push(new am4charts.CircleBullet());\n        bullet.circle.stroke = interfaceColors.getFor(\"background\");\n        bullet.circle.strokeWidth = 2;\n        valueAxis.renderer.line.strokeOpacity = 1;\n        valueAxis.renderer.line.strokeWidth = 2;\n        valueAxis.renderer.line.stroke = series.stroke;\n        valueAxis.renderer.labels.template.fill = series.stroke;\n        valueAxis.renderer.opposite = opposite;\n      };\n\n      createAxisAndSeries(\"Total Cases\", \"Confirmed\");\n      createAxisAndSeries(\"Total Recovered\", \"Recovered\");\n      createAxisAndSeries(\"Total Deaths\", \"Deaths\");\n      chart.legend = new am4charts.Legend();\n      chart.legend.position = 'bottom';\n      chart.legend.markers.template.width = chart.legend.markers.template.height = 10;\n      chart.legend.fontSize = 12;\n      let marker = chart.legend.markers.template.children.getIndex(0);\n      chart.legend.labels.template.fill = am4core.color('#fff');\n      chart.legend.valueLabels.template.fill = am4core.color('#fff');\n      marker.cornerRadius(3, 3, 3, 3);\n      chart.cursor = new am4charts.XYCursor();\n      chart.cursor.xAxis = xAxis;\n      chart.cursor.fullWidthLineX = true;\n      chart.cursor.lineX.fill = am4core.color(\"#fff\");\n      chart.cursor.lineX.fillOpacity = 0.2;\n      xAxis.cursorTooltipEnabled = false;\n      this.setState({\n        am4chart: chart\n      }, () => {\n        if (this.state.data) chart.data = this.state.data;\n      });\n    }, \"tFi1QeP7MrrEQ5RfFlomBKZonOc=\", true));\n\n    let execute = resp => {\n      let data = this.props.extract(resp);\n      this.setState({\n        data\n      }, () => {\n        if (this.state.am4chart) {\n          let chart = this.state.am4chart;\n          chart.data = data;\n        }\n      });\n    };\n\n    let retry = () => {\n      this.props.load().then(resp => resp.json()).then(execute).catch(err => retry);\n    };\n\n    retry();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"grey header\",\n        children: this.props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            display: !this.state.data ? \"none\" : \"table\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"covidgraph\",\n              id: \"covidgraph_\" + this.props.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), this.state.data == null ? /*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"full\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Majed/Desktop/covidapp/src/components/CovidGraph.js"],"names":["React","CovidGraph","Component","constructor","state","am4chart","data","shouldComponentUpdate","nextProps","nextState","componentDidMount","am4core","ready","useTheme","target","list","color","chart","create","props","name","am4charts","PieChart","xAxis","xAxes","push","DateAxis","createAxisAndSeries","field","opposite","valueAxis","yAxes","ValueAxis","indexOf","syncWithAxis","getIndex","series","LineSeries","dataFields","valueY","dateX","strokeWidth","yAxis","tooltipText","tensionX","showOnInit","interfaceColors","InterfaceColorSet","bullet","bullets","CircleBullet","circle","stroke","getFor","renderer","line","strokeOpacity","labels","template","fill","legend","Legend","position","markers","width","height","fontSize","marker","children","valueLabels","cornerRadius","cursor","XYCursor","fullWidthLineX","lineX","fillOpacity","cursorTooltipEnabled","setState","execute","resp","extract","retry","load","then","json","catch","err","render","title","display"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,kBAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AACpDC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,QAAQ,EAAE,KAAX;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAAb;AACH;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,WAAO,EAAEA,SAAS,CAACH,IAAV,IAAkB,IAApB,CAAP;AACH;;AAEDI,EAAAA,iBAAiB,GAAG;AAAA;;AAChBC,IAAAA,OAAO,CAACC,KAAR,IAAc,MAAM;AAAA;;AAChBD,MAAAA,OAAO,CAACE,QAAR,CAAiBC,MAAM,IAAI;AACvBA,QAAAA,MAAM,CAACC,IAAP,GAAc,CACVJ,OAAO,CAACK,KAAR,CAAc,SAAd,CADU,EAEVL,OAAO,CAACK,KAAR,CAAc,SAAd,CAFU,EAGVL,OAAO,CAACK,KAAR,CAAc,SAAd,CAHU,CAAd;AAKH,OAND;AAQA,UAAIC,KAAK,GAAGN,OAAO,CAACO,MAAR,CAAe,gBAAgB,KAAKC,KAAL,CAAWC,IAA1C,EAAgDC,SAAS,CAACC,QAA1D,CAAZ;AACA,UAAIC,KAAK,GAAGN,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiB,IAAIJ,SAAS,CAACK,QAAd,EAAjB,CAAZ;;AACA,UAAKC,mBAAmB,GAAG,CAACC,KAAD,EAAQR,IAAR,EAAcS,QAAQ,GAAC,IAAvB,KAAgC;AACvD,YAAIC,SAAS,GAAGb,KAAK,CAACc,KAAN,CAAYN,IAAZ,CAAiB,IAAIJ,SAAS,CAACW,SAAd,EAAjB,CAAhB;AACA,YAAGf,KAAK,CAACc,KAAN,CAAYE,OAAZ,CAAoBH,SAApB,KAAkC,CAArC,EACIA,SAAS,CAACI,YAAV,GAAyBjB,KAAK,CAACc,KAAN,CAAYI,QAAZ,CAAqB,CAArB,CAAzB;AAEJ,YAAIC,MAAM,GAAGnB,KAAK,CAACmB,MAAN,CAAaX,IAAb,CAAkB,IAAIJ,SAAS,CAACgB,UAAd,EAAlB,CAAb;AACAD,QAAAA,MAAM,CAACE,UAAP,CAAkBC,MAAlB,GAA2BX,KAA3B;AACAQ,QAAAA,MAAM,CAACE,UAAP,CAAkBE,KAAlB,GAA0B,MAA1B;AACAJ,QAAAA,MAAM,CAACK,WAAP,GAAqB,CAArB;AACAL,QAAAA,MAAM,CAACM,KAAP,GAAeZ,SAAf;AACAM,QAAAA,MAAM,CAAChB,IAAP,GAAcA,IAAd;AACAgB,QAAAA,MAAM,CAACO,WAAP,GAAqB,2BAArB;AACAP,QAAAA,MAAM,CAACQ,QAAP,GAAkB,GAAlB;AACAR,QAAAA,MAAM,CAACS,UAAP,GAAoB,IAApB;AAEA,YAAIC,eAAe,GAAG,IAAInC,OAAO,CAACoC,iBAAZ,EAAtB;AACA,YAAIC,MAAM,GAAGZ,MAAM,CAACa,OAAP,CAAexB,IAAf,CAAoB,IAAIJ,SAAS,CAAC6B,YAAd,EAApB,CAAb;AACAF,QAAAA,MAAM,CAACG,MAAP,CAAcC,MAAd,GAAuBN,eAAe,CAACO,MAAhB,CAAuB,YAAvB,CAAvB;AACAL,QAAAA,MAAM,CAACG,MAAP,CAAcV,WAAd,GAA4B,CAA5B;AAEAX,QAAAA,SAAS,CAACwB,QAAV,CAAmBC,IAAnB,CAAwBC,aAAxB,GAAwC,CAAxC;AACA1B,QAAAA,SAAS,CAACwB,QAAV,CAAmBC,IAAnB,CAAwBd,WAAxB,GAAsC,CAAtC;AACAX,QAAAA,SAAS,CAACwB,QAAV,CAAmBC,IAAnB,CAAwBH,MAAxB,GAAiChB,MAAM,CAACgB,MAAxC;AACAtB,QAAAA,SAAS,CAACwB,QAAV,CAAmBG,MAAnB,CAA0BC,QAA1B,CAAmCC,IAAnC,GAA0CvB,MAAM,CAACgB,MAAjD;AACAtB,QAAAA,SAAS,CAACwB,QAAV,CAAmBzB,QAAnB,GAA8BA,QAA9B;AACH,OAzBD;;AA2BAF,MAAAA,mBAAmB,CAAC,aAAD,EAAgB,WAAhB,CAAnB;AACAA,MAAAA,mBAAmB,CAAC,iBAAD,EAAoB,WAApB,CAAnB;AACAA,MAAAA,mBAAmB,CAAC,cAAD,EAAiB,QAAjB,CAAnB;AAEAV,MAAAA,KAAK,CAAC2C,MAAN,GAAe,IAAIvC,SAAS,CAACwC,MAAd,EAAf;AACA5C,MAAAA,KAAK,CAAC2C,MAAN,CAAaE,QAAb,GAAwB,QAAxB;AACA7C,MAAAA,KAAK,CAAC2C,MAAN,CAAaG,OAAb,CAAqBL,QAArB,CAA8BM,KAA9B,GAAsC/C,KAAK,CAAC2C,MAAN,CAAaG,OAAb,CAAqBL,QAArB,CAA8BO,MAA9B,GAAuC,EAA7E;AACAhD,MAAAA,KAAK,CAAC2C,MAAN,CAAaM,QAAb,GAAwB,EAAxB;AACA,UAAIC,MAAM,GAAGlD,KAAK,CAAC2C,MAAN,CAAaG,OAAb,CAAqBL,QAArB,CAA8BU,QAA9B,CAAuCjC,QAAvC,CAAgD,CAAhD,CAAb;AACAlB,MAAAA,KAAK,CAAC2C,MAAN,CAAaH,MAAb,CAAoBC,QAApB,CAA6BC,IAA7B,GAAoChD,OAAO,CAACK,KAAR,CAAc,MAAd,CAApC;AACAC,MAAAA,KAAK,CAAC2C,MAAN,CAAaS,WAAb,CAAyBX,QAAzB,CAAkCC,IAAlC,GAAyChD,OAAO,CAACK,KAAR,CAAc,MAAd,CAAzC;AACAmD,MAAAA,MAAM,CAACG,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AACArD,MAAAA,KAAK,CAACsD,MAAN,GAAe,IAAIlD,SAAS,CAACmD,QAAd,EAAf;AACAvD,MAAAA,KAAK,CAACsD,MAAN,CAAahD,KAAb,GAAqBA,KAArB;AACAN,MAAAA,KAAK,CAACsD,MAAN,CAAaE,cAAb,GAA8B,IAA9B;AACAxD,MAAAA,KAAK,CAACsD,MAAN,CAAaG,KAAb,CAAmBf,IAAnB,GAA0BhD,OAAO,CAACK,KAAR,CAAc,MAAd,CAA1B;AACAC,MAAAA,KAAK,CAACsD,MAAN,CAAaG,KAAb,CAAmBC,WAAnB,GAAiC,GAAjC;AACApD,MAAAA,KAAK,CAACqD,oBAAN,GAA6B,KAA7B;AAEA,WAAKC,QAAL,CAAc;AAACxE,QAAAA,QAAQ,EAAEY;AAAX,OAAd,EAAiC,MAAM;AACnC,YAAK,KAAKb,KAAL,CAAWE,IAAhB,EACAW,KAAK,CAACX,IAAN,GAAa,KAAKF,KAAL,CAAWE,IAAxB;AACH,OAHD;AAIH,KA7DD;;AA+DA,QAAIwE,OAAO,GAAIC,IAAD,IAAU;AACpB,UAAIzE,IAAI,GAAG,KAAKa,KAAL,CAAW6D,OAAX,CAAmBD,IAAnB,CAAX;AAEA,WAAKF,QAAL,CAAc;AACVvE,QAAAA;AADU,OAAd,EAEG,MAAM;AACL,YAAK,KAAKF,KAAL,CAAWC,QAAhB,EAA2B;AACvB,cAAIY,KAAK,GAAG,KAAKb,KAAL,CAAWC,QAAvB;AACAY,UAAAA,KAAK,CAACX,IAAN,GAAaA,IAAb;AACH;AACJ,OAPD;AAQH,KAXD;;AAaA,QAAI2E,KAAK,GAAG,MAAM;AACd,WAAK9D,KAAL,CAAW+D,IAAX,GAAkBC,IAAlB,CACIJ,IAAI,IAAIA,IAAI,CAACK,IAAL,EADZ,EAEED,IAFF,CAGIL,OAHJ,EAIEO,KAJF,CAIQC,GAAG,IAAIL,KAJf;AAKH,KAND;;AAMGA,IAAAA,KAAK;AACX;;AAEDM,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBAA6B,KAAKpE,KAAL,CAAWqE;AAAxC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,SAAS,EAAC,SAAjB;AAAA,gCACI;AAAO,UAAA,KAAK,EAAE;AAACC,YAAAA,OAAO,EAAE,CAAC,KAAKrF,KAAL,CAAWE,IAAZ,GAAmB,MAAnB,GAA4B;AAAtC,WAAd;AAAA,iCACI;AAAA,mCAAI;AAAI,cAAA,SAAS,EAAC,YAAd;AAA2B,cAAA,EAAE,EAAE,gBAAgB,KAAKa,KAAL,CAAWC;AAA1D;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,EAMK,KAAKhB,KAAL,CAAWE,IAAX,IAAmB,IAAnB,gBACG;AAAO,UAAA,SAAS,EAAC,MAAjB;AAAA,iCACA;AAAA,mCAAI;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,SAAf;AAAA,wCACI;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,wBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADH,GAWG,IAjBR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAyBH;;AA1HmD","sourcesContent":["import React from 'react';\r\n\r\nimport './CovidGraph.css';\r\n\r\nexport default class CovidGraph extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {am4chart: false, data: null};\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextState.data == null);\r\n    }\r\n\r\n    componentDidMount() {\r\n        am4core.ready(() => {\r\n            am4core.useTheme(target => {\r\n                target.list = [\r\n                    am4core.color(\"#c44569\"),\r\n                    am4core.color(\"#546de5\"),\r\n                    am4core.color(\"#f5cd79\")\r\n                ];\r\n            });\r\n\r\n            let chart = am4core.create(\"covidgraph_\" + this.props.name, am4charts.PieChart);\r\n            let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n            let  createAxisAndSeries = (field, name, opposite=true) => {\r\n                let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n                if(chart.yAxes.indexOf(valueAxis) != 0)\r\n                    valueAxis.syncWithAxis = chart.yAxes.getIndex(0);\r\n                \r\n                let series = chart.series.push(new am4charts.LineSeries());\r\n                series.dataFields.valueY = field;\r\n                series.dataFields.dateX = \"Date\";\r\n                series.strokeWidth = 2;\r\n                series.yAxis = valueAxis;\r\n                series.name = name;\r\n                series.tooltipText = \"{name}: [bold]{valueY}[/]\";\r\n                series.tensionX = 0.8;\r\n                series.showOnInit = true;\r\n                \r\n                let interfaceColors = new am4core.InterfaceColorSet();\r\n                let bullet = series.bullets.push(new am4charts.CircleBullet());\r\n                bullet.circle.stroke = interfaceColors.getFor(\"background\");\r\n                bullet.circle.strokeWidth = 2;\r\n                \r\n                valueAxis.renderer.line.strokeOpacity = 1;\r\n                valueAxis.renderer.line.strokeWidth = 2;\r\n                valueAxis.renderer.line.stroke = series.stroke;\r\n                valueAxis.renderer.labels.template.fill = series.stroke;\r\n                valueAxis.renderer.opposite = opposite;\r\n            }\r\n\r\n            createAxisAndSeries(\"Total Cases\", \"Confirmed\");\r\n            createAxisAndSeries(\"Total Recovered\", \"Recovered\");\r\n            createAxisAndSeries(\"Total Deaths\", \"Deaths\");\r\n\r\n            chart.legend = new am4charts.Legend();\r\n            chart.legend.position = 'bottom'\r\n            chart.legend.markers.template.width = chart.legend.markers.template.height = 10;\r\n            chart.legend.fontSize = 12;\r\n            let marker = chart.legend.markers.template.children.getIndex(0);\r\n            chart.legend.labels.template.fill = am4core.color('#fff');\r\n            chart.legend.valueLabels.template.fill = am4core.color('#fff');\r\n            marker.cornerRadius(3, 3, 3, 3);\r\n            chart.cursor = new am4charts.XYCursor();\r\n            chart.cursor.xAxis = xAxis;\r\n            chart.cursor.fullWidthLineX = true;\r\n            chart.cursor.lineX.fill = am4core.color(\"#fff\");\r\n            chart.cursor.lineX.fillOpacity = 0.2;\r\n            xAxis.cursorTooltipEnabled = false;\r\n            \r\n            this.setState({am4chart: chart}, () => {\r\n                if ( this.state.data )\r\n                chart.data = this.state.data;\r\n            });\r\n        });\r\n\r\n        let execute = (resp) => {\r\n            let data = this.props.extract(resp);\r\n\r\n            this.setState({\r\n                data\r\n            }, () => {\r\n                if ( this.state.am4chart ) {\r\n                    let chart = this.state.am4chart;\r\n                    chart.data = data;\r\n                }\r\n            });\r\n        };\r\n\r\n        let retry = () => {\r\n            this.props.load().then(\r\n                resp => resp.json()\r\n            ).then(\r\n                execute\r\n            ).catch(err => retry);\r\n        }; retry();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"grey header\">{this.props.title}</h1>\r\n                <table className=\"summary\">\r\n                    <tbody style={{display: !this.state.data ? \"none\" : \"table\"}}>\r\n                        <tr><td className=\"covidgraph\" id={\"covidgraph_\" + this.props.name}>\r\n                        </td></tr>\r\n                    </tbody>\r\n\r\n                    {this.state.data == null ?\r\n                        <tbody className=\"full\">\r\n                        <tr><td>\r\n                                <div className=\"loading\">\r\n                                    <div></div>\r\n                                    <div></div>\r\n                                    <div></div>\r\n                                </div>\r\n                            </td></tr>\r\n                        </tbody>\r\n                        :\r\n                        null\r\n                    }\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}